generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  number          String?
  role            String    @default("user")
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  Account           Account[]
  sentRequests      MoneyRequest[]      @relation(name: "RequestFromUserRelation")
  receivedRequests  MoneyRequest[]      @relation(name: "RequestToUserRelation")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model MoneyRequest {
  id         Int      @id @default(autoincrement())
  amount     Int
  fromUserId Int
  fromUser   User     @relation(name: "RequestFromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User     @relation(name: "RequestToUserRelation", fields: [toUserId], references: [id])
  status     String   @default("Pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timeStamp  DateTime @default(now())
  fromUserId Int
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id        Int      @id @default(autoincrement())
  status    String   @default("Processing")
  token     String   @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
}
